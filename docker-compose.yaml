version: '3.9'

services:

  # Jaeger (Distributed Tracing)
  jaeger:
    image: jaegertracing/all-in-one:1.47
    container_name: jaeger
    ports:
      - "16686:16686"   # Jaeger UI
      - "14268:14268"   # Collector endpoint for OpenTelemetry
    networks:
      - routify-net


  # Backend Go gRPC API
  api:
    build:
      context: .
      dockerfile: docker/api.Dockerfile
    container_name: routify-api
    ports:
      - "50051:50051"
    environment:
      - REDIS_ADDR=redis:6379
      - POSTGRES_CONN=postgres://user:password@postgres:5432/routify?sslmode=disable
    depends_on:
      - redis
      - postgres
    networks:
      - routify-net

  # React Frontend
  ui:
    build:
      context: .
      dockerfile: docker/ui.Dockerfile
    container_name: routify-ui
    ports:
      - "3000:80"
    networks:
      - routify-net

  # Redis cache
  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - routify-net

  # PostgreSQL database
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_DB: routify
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - pg-data:/var/lib/postgresql/data
    networks:
      - routify-net

  # Prometheus
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - routify-net

  # Grafana
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3001:3000"
    networks:
      - routify-net
    volumes:
      - grafana-data:/var/lib/grafana

volumes:
  pg-data:
  redis-data:
  grafana-data:

networks:
  routify-net:
